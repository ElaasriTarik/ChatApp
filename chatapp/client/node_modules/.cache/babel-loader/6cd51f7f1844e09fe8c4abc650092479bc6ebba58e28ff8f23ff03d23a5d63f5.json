{"ast":null,"code":"var _jsxFileName = \"/home/tarek/chatapp/client/src/Home.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport sendLogo from './send.png';\nimport './index.css';\nimport Users from './Users';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n  // listening on type\n  const [inputValue, setInputValue] = React.useState('');\n  const [user, setUser] = React.useState(false);\n  const handleChange = e => {\n    setInputValue(e.target.value);\n  };\n  // sending message to backend\n  const sendMessage = () => {\n    fetch('/sendMessage', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: inputValue\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n    }).catch(error => console.error('Error sending message:', error));\n  };\n  // get all users\n  const [usersData, setUsersData] = React.useState([]);\n  React.useEffect(() => {\n    const getUsers = () => {\n      fetch('/getUsers').then(response => response.json()).then(data => {\n        setUsersData(data); // Update state with fetched data\n      }).catch(error => console.error('Error fetching users:', error));\n    };\n    getUsers();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [usersData.map(user => /*#__PURE__*/_jsxDEV(Users, {\n      data: user\n    }, user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 36\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typingBar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type something...\",\n        className: \"input\",\n        onChange: e => handleChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sendButton\",\n        onClick: sendMessage,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: sendLogo,\n          alt: \"send button\",\n          className: \"sendBtn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n_s(Home, \"BQYWEozf98JwB6nchmzBkl98zGo=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","sendLogo","Users","BrowserRouter","Routes","Route","jsxDEV","_jsxDEV","Home","_s","inputValue","setInputValue","useState","user","setUser","handleChange","e","target","value","sendMessage","fetch","method","headers","body","JSON","stringify","message","then","response","json","data","console","log","catch","error","usersData","setUsersData","useEffect","getUsers","className","children","map","id","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","src","alt","_c","$RefreshReg$"],"sources":["/home/tarek/chatapp/client/src/Home.js"],"sourcesContent":["import React from 'react';\nimport sendLogo from './send.png';\nimport './index.css';\nimport Users from './Users';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\nexport default function Home() {\n    // listening on type\n    const [inputValue, setInputValue] = React.useState('');\n    const [user, setUser] = React.useState(false);\n    const handleChange = (e) => {\n        setInputValue(e.target.value);\n    }\n    // sending message to backend\n    const sendMessage = () => {\n        fetch('/sendMessage', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ message: inputValue })\n        })\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n            })\n            .catch(error => console.error('Error sending message:', error));\n    }\n    // get all users\n    const [usersData, setUsersData] = React.useState([]);\n\n    React.useEffect(() => {\n        const getUsers = () => {\n            fetch('/getUsers')\n                .then(response => response.json())\n                .then(data => {\n                    setUsersData(data); // Update state with fetched data\n                })\n                .catch(error => console.error('Error fetching users:', error));\n        };\n        getUsers();\n    }, []);\n    return (\n        <div className=\"container\">\n            {usersData.map(user => <Users key={user.id} data={user} />)}\n            <div className='header'>\n            </div>\n\n            <div className='typingBar'>\n                <input type='text' placeholder='Type something...' className='input' onChange={(e) => handleChange(e)} />\n                <div className='sendButton' onClick={sendMessage}>\n                    <img src={sendLogo} alt='send button' className='sendBtn' />\n                </div>\n            </div>\n        </div>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}